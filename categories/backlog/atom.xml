<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backlog | Ivan Voroshilin's Blog.]]></title>
  <link href="http://vibneiro.github.io/categories/backlog/atom.xml" rel="self"/>
  <link href="http://vibneiro.github.io/"/>
  <updated>2015-03-14T00:05:48+03:00</updated>
  <id>http://vibneiro.github.io/</id>
  <author>
    <name><![CDATA[Ivan Voroshilin]]></name>
    <email><![CDATA[mail@ivoroshilin.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Blog Has Migrated to a New Platform]]></title>
    <link href="http://vibneiro.github.io/2015/03/13/migrated-to-octopress/"/>
    <updated>2015-03-13T02:25:26+03:00</updated>
    <id>http://vibneiro.github.io/2015/03/13/migrated-to-octopress</id>
    <content type="html"><![CDATA[<p>The site has some syntax errors due to migration. This is going to be fixed soon.
My apologies for inconvenience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Discovery Solutions in Distributed Systems]]></title>
    <link href="http://vibneiro.github.io/2015/03/04/review-of-service-discovery-solutions/"/>
    <updated>2015-03-04T22:25:26+03:00</updated>
    <id>http://vibneiro.github.io/2015/03/04/review-of-service-discovery-solutions</id>
    <content type="html"><![CDATA[<p>Today I participated in a conference in Moscow/Russia devoted to new technologies in the software world.
For those who attended, thanks for your questions! I&rsquo;m attaching here the presentation:</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/45437768" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/IvanVoroshilin/service-d-icsovery-in-distributed-systems" title="Service Discovery in Distributed Systems" target="_blank">Service Discovery in Distributed Systems</a> </strong> from <strong><a href="//www.slideshare.net/IvanVoroshilin" target="_blank">Ivan Voroshilin</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerizing Spray HTTP Server]]></title>
    <link href="http://vibneiro.github.io/2014/12/16/docker-creating-and-testing-httprest-server-on-top-of-akkaspray/"/>
    <updated>2014-12-16T01:22:04+03:00</updated>
    <id>http://vibneiro.github.io/2014/12/16/docker-creating-and-testing-httprest-server-on-top-of-akkaspray</id>
    <content type="html"><![CDATA[<p><a href="https://ivoroshilin.files.wordpress.com/2014/10/docker.png"><img src="https://ivoroshilin.files.wordpress.com/2014/10/docker.png" alt="docker" /></a><a href="https://ivoroshilin.files.wordpress.com/2014/12/spray.png"><img src="https://ivoroshilin.files.wordpress.com/2014/12/spray.png" alt="spray" /></a></p>

<p>This is the continuation of the <a href="http://ivoroshilin.com/2014/10/30/docker-a-birds-eye-view/">previous article</a>. This series shows how simple it is to create a lightweight HTTP-server based on <a href="http://spray.io">Spray</a> framework, put it into a <a href="https://docs.docker.com">Docker</a>-image and run multiple instances on any single machine requiring no dependencies.</p>

<h3>Implementing a lightweight RESTful HTTP Service</h3>

<p>The whole project can be found on <a href="https://github.com/vibneiro/DockerSprayHttpServer">GitHub</a>. For impatient, git pull it and jump right to the next section. We&rsquo;re going to use Scala and Akka framework along with <a href="http://www.scala-sbt.org">SBT</a> build tool. From Spray framework we will use a <a href="http://spray.io/documentation/1.1-SNAPSHOT/spray-routing/">spray-routing</a> module which has a simple routing DSL for elegantly defining RESTful web services and it works on top of a <a href="http://spray.io/documentation/1.1-SNAPSHOT/spray-can/#spray-can">spray-can HTTP Server</a><em>.</em></p>

<p>Ok, let&rsquo;s get started.</p>

<p>[code language=&ldquo;scala&rdquo;]
import akka.actor.{ActorSystem}
import spray.routing.<em>
import akka.util.Timeout
import scala.concurrent.duration.</em>
import scala.util.{Failure, Success}</p>

<p>object HttpServer extends App with SimpleRoutingApp {</p>

<p>  implicit val actorSystem = ActorSystem()
  implicit val timeout = Timeout(1.second)
  import actorSystem.dispatcher</p>

<p>  startServer(interface = &ldquo;localhost&rdquo;, port = 8080) {</p>

<pre><code>// GET /welcome --&gt; "Welcome!" response
get {
  path("welcome") {
    complete {
      &lt;html&gt;
        &lt;h1&gt;"Welcome!&lt;/h1&gt;
        &lt;p&gt;&lt;a href="http://vibneiro.github.io/terminate?method=post"&gt;Stop the server&lt;/a&gt;&lt;/p&gt;
      &lt;/html&gt;
    }
  }
} ~
  // POST /terminate --&gt; "The server is stopping" response
  (post | parameter('method ! "post")) {
    path("terminate") {
      complete {
        actorSystem.scheduler.scheduleOnce(1.second)(actorSystem.shutdown())(actorSystem.dispatcher)
        "The server is stopping"
      }
    }
  }
</code></pre>

<p>  }
    .onComplete {
    case Success(b) =>
      println(&ldquo;Successfully started&rdquo;)
    case Failure(ex) =>
      println(ex.getMessage)
      actorSystem.shutdown()
  }
}
[/code]</p>

<p>The REST API is as follows:</p>

<ul>
<li><p>GET/welcome &ndash;> responds with a &ldquo;Welcome&rdquo; and Post-hyperlink.</p></li>
<li><p>POST/terminate &ndash;> will stop the server.</p></li>
</ul>


<p>DSL describing this API is inside of a method <strong>startServer.  </strong>And that&rsquo;s it!</p>

<p>I didn&rsquo;t want to show the full power of Spray because this article is solely about Docker.</p>

<p>Let&rsquo;s run it and check:</p>

<p>[code language=&ldquo;bash&rdquo;]
curl <a href="http://localhost:8080/welcome">http://localhost:8080/welcome</a>
[/code]</p>

<h3>Dockerizing the server</h3>

<p>Because the Docker Engine uses Linux-specific kernel features, I&rsquo;m going to use <a href="https://docs.docker.com/installation/mac/">lightweight virtual machine</a> to run it on OS X. If you too, just download it, install and run - easy peasy. Just make sure before dockerizing that you&rsquo;ve set the following 3 env variables for connecting your client to the VM:</p>

<p>[code language=&ldquo;bash&rdquo;]
export DOCKER_HOST=tcp://192.168.59.103:2376
export DOCKER_CERT_PATH=/Users/ivan/.boot2docker/certs/boot2docker-vm
export DOCKER_TLS_VERIFY=1
[/code]</p>

<p>The remaining stuff doesn&rsquo;t differ much.</p>

<p>We use a <a href="https://registry.hub.docker.com/u/dockerfile/java/">trusted automated java build</a> (OpenJDK Java 7 JRE Dockerfile) as a base of our image.</p>

<p>First, you will need to create a Dockerfile for the image in your project:</p>

<pre><code># Our base image
FROM dockerfile/java

WORKDIR /

USER daemon

# Here the stuff that we're going to place into the image
ADD target/scala-2.11/docker-spray-http-server-assembly-1.0.jar /app/server.jar

# entry jar to be run in a container
ENTRYPOINT [ "java", "-jar", "/app/server.jar" ]

# HTTP port
EXPOSE 8080
</code></pre>

<p>Build your project as a single jar file:</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ sbt assembly
[/code]</p>

<p>And now navigate to the project&rsquo;s folder and run:</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ docker build .
[/code]</p>

<p>This will send the newly created image to the Docker daemon.</p>

<h3>Running multiple instances on a single machine</h3>

<p>Run the following command to see available docker images :</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ docker images
[/code]</p>

<p><a href="https://ivoroshilin.files.wordpress.com/2014/12/d181d0bdd0b8d0bcd0bed0ba-d18dd0bad180d0b0d0bdd0b0-2014-12-15-d0b2-23-48-52.png"><img src="https://ivoroshilin.files.wordpress.com/2014/12/d181d0bdd0b8d0bcd0bed0ba-d18dd0bad180d0b0d0bdd0b0-2014-12-15-d0b2-23-48-52.png" alt="Снимок экрана 2014-12-15 в 23.48.52" /></a></p>

<p>a83cda03f529 is not in the repo yet - what we&rsquo;ve just created. We&rsquo;re going to run multiple instances from it.</p>

<p>First run the 1-st instance:</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ docker run -d -p 10001:8080 a83cda03f529
[/code]</p>

<p>Note, that we have mapped our 8080&ndash;>10001 port.</p>

<p>Now, let&rsquo;s verify the container is running:</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ docker ps
[/code]</p>

<p><a href="https://ivoroshilin.files.wordpress.com/2014/12/d181d0bdd0b8d0bcd0bed0ba-d18dd0bad180d0b0d0bdd0b0-2014-12-16-d0b2-0-58-12.png"><img src="https://ivoroshilin.files.wordpress.com/2014/12/d181d0bdd0b8d0bcd0bed0ba-d18dd0bad180d0b0d0bdd0b0-2014-12-16-d0b2-0-58-12.png" alt="Снимок экрана 2014-12-16 в 0.58.12" /></a></p>

<p>We exposed port 8080 for the http-server. When run in Docker-container, it maps our port onto another. On top of this I am  on OS X. Do you remember we set at the beginning 3 env vars? One of them is DOCKER_HOST.</p>

<p>You can actually check this IP as follows:</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ boot2docker ip
[/code]</p>

<p>We need to use this IP address (for OS X, as we are not on Linux).</p>

<p>Let&rsquo;s test it:</p>

<p>[code language=&ldquo;bash&rdquo;]
DockerSprayHttpServer$ curl $(boot2docker ip):10001/welcome
[/code]</p>

<p>Great!</p>

<p>You can run as many containers as you want! They are completely isolated. For Scala developers, by they way, I&rsquo;ve found a<a href="https://github.com/marcuslonnberg/sbt-docker"> nice contribution</a>, you can dockerize your artifacts right from SBT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker: A Bird's-eye View]]></title>
    <link href="http://vibneiro.github.io/2014/10/30/docker-a-birds-eye-view/"/>
    <updated>2014-10-30T23:37:44+03:00</updated>
    <id>http://vibneiro.github.io/2014/10/30/docker-a-birds-eye-view</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Docker is a new container technology that primarily allows to run multiple applications on the same old server and operating system. It also makes it easy to package and ship applications. Let&rsquo;s analyze why Docker can become a replacement of virtual machines and why it is better (or not). Though, undoubtedly it has easy-to-use deployment stuff.</p>

<p><a href="https://ivoroshilin.files.wordpress.com/2014/10/docker.png"><img src="https://ivoroshilin.files.wordpress.com/2014/10/docker.png" alt="docker" /></a></p>

<h3>The gist</h3>

<p>VM hypervisors emulate virtual hardware and guzzle system resources heavily - each VM has its separated operating system. Conversely, Docker containers use a single shared operating system. Basically, each container has only its application and other dependencies. It is very lightweight as we don&rsquo;t set up a separate operating system for each container. You can run much more applications (containers) in a single physical instance of hardware unlike VM with Docker. Docker is extremely rapidly getting popular, because It&rsquo;s light, simple and you can save a great deal of money on hardware and electricity.</p>

<p>There are 2 major parts of operating system (Linux) that ensure the proper work of Docker.</p>

<h3>LXC</h3>

<p>Docker is built on top of LXC and allows to divide up operating system&rsquo;s Kernel. It means that with Docker it is possible to use only Linux and share a single operating system for all containers. I&rsquo;ve heard, by the way, that Windows platform has recently adapted Docker too.</p>

<p>The LXC technology (<a href="http://lxc.sourceforge.net/">LinuX Containers</a>), which Docker is based from, relies on <a href="http://en.wikipedia.org/wiki/Security-Enhanced_Linux">SELinux</a> and its <a href="http://en.wikipedia.org/wiki/Cgroups">cgroups</a> to keep everyone in their own sandbox. You can restrict hardware resources: CPU, memory, disk. It can also manage the networking and mounts of filesystem for you as well. In other words you can run multiple isolated Linux containers on one host. Linux Containers serve as a lightweight alternative to VMs as they don’t require the hypervisors. Unlike VMs, LXC don’t require the hypervisor - this is not VM, but an ordinary host.</p>

<p>Assume, you have a container image of 1 GB. If you want to use virtualization, you will need 1 GB multiplied by a number of VMs required. With LXC you just share 1GB. Having 1 thousand containers requires just a little over 1GB of space for the containers OS, assuming they are all running the same OS image. Furthermore, LXCs have have better performance compared to VMs.</p>

<h3>AuFS</h3>

<p>Another technology used in Docker is <a href="http://en.wikipedia.org/wiki/Aufs">AuFS</a> -  advanced multi layered unification filesystem. Docker can save images for you and they can be represented as incremental updates to the baseline snapshots. You may have a base snapshot of e.g. Linux, make minor changes to it, save a new snapshot as a diff. AuFS allows incrementally merge all these snapshot updates into a single layered snapshot. That is the idea.</p>

<h3>When to use Docker</h3>

<p>If you need a full isolation of resources, a virtual machine is the way to go. However, if you need to run hundreds of isolated processes on an average host, then Docker is a good fit. There are some use cases when Docker is a win. I can see it as a good tool for development where you run tons of containers on a single machine, doing some interesting stuff in parallel with different deployments from a single Docker image. E.g. you can run a large number of development environments on the same host. For example, Dev, QA, Performance environments on old hardware also. Have a look at <a href="http://www.fig.sh">Fig</a> project which is intended for these purposes and works along with Docker. It has a straightforward tutorial and super easy commands.</p>

<h3>Conclusion</h3>

<p>Docker is another technique for performing the same tasks as in Virtual Machines but with the restriction of a shared OS Linux. It  is not quite mature however. There might be potential exploits to crash operating system bringing down all of the processes at once. This is the main drawback of Containers, whereas VMs ensure complete isolation. Besides that many companies use one in Production you might want to wait, but you can definitely start playing around with it on your dev continuous integration process.</p>

<h3>References</h3>

<p><a href="https://www.docker.com">Docker</a></p>

<p><a href="http://blog.docker.com/2013/08/containers-docker-how-secure-are-they/">Containers and Docker: How secure are they </a></p>

<p><a href="http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part">PaaS under the hood</a></p>

<p><a href="http://www.fig.sh">FIG</a></p>

<p><a href="http://blog.docker.com/2014/08/getting-started-with-orchestration-using-fig/">Getting started with Docker Orcherstration using FIG</a></p>
]]></content>
  </entry>
  
</feed>
